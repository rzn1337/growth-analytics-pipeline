version: "3"

services:
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001    # MinIO console
      - 9000:9000    # MinIO API
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio-data:/data

  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      - iceberg_net
    depends_on:
      - rest
      - minio
    volumes:
      - ./data:/home/iceberg/data
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
      - 4040-4042:4040-4042

  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      - iceberg_net
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
    networks:
      - iceberg_net
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until mc alias set minio http://minio:9000 admin password; do
        echo 'waiting for minioâ€¦' && sleep 1;
      done;
      mc mb --ignore-existing minio/warehouse;
      mc policy set public minio/warehouse;
      tail -f /dev/null
      "

networks:
  iceberg_net:
    driver: bridge

volumes:
  minio-data:
